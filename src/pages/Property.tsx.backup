import { useEffect, useRef, useState } from 'react'
import type React from 'react'
import { useParams, Link } from 'react-router-dom'
import { motion, AnimatePresence } from 'framer-motion'
import { getEBProperty, listEBPropertiesPaged, type EBPropertyDetail, type EBProperty } from '../services/easybroker'
import { Footer } from '../components/Footer.tsx'
import Navbar from '../components/Navbar.tsx'
import CustomCalendar from '../components/CustomCalendar.tsx'

function Amenity({ icon, label }: { icon: React.ReactNode; label: string }) {
  return (
    <div className="flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-2 text-sm">
      <span className="nv-icon inline-flex items-center justify-center"><i>{icon}</i></span>
      <span className="text-white/85">{label}</span>
    </div>
  )
}

export default function Property() {
  const params = useParams()
  const publicId = params.id as string
  const [eb, setEb] = useState<EBPropertyDetail | null>(null)
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)
  const [similar, setSimilar] = useState<EBProperty[]>([])
  const [nearby, setNearby] = useState<EBProperty[]>([])
  const nearbyRef = useRef<HTMLDivElement | null>(null)
  const scrollNearby = (dir: number) => {
    const el = nearbyRef.current
    if (!el) return
    const CARD_SCROLL = 360
    el.scrollBy({ left: dir * CARD_SCROLL, behavior: 'smooth' })
  }

  useEffect(() => {
    let mounted = true
    setLoading(true)
    setError(null)
    getEBProperty(publicId)
      .then((res) => { if (mounted) setEb(res) })
      .catch((err) => { console.error(err); if (mounted) setError('No pudimos cargar esta propiedad.') })
      .finally(() => { if (mounted) setLoading(false) })
    return () => { mounted = false }
  }, [publicId])

  // Load similar and nearby from API once we have the base property
  useEffect(() => {
    if (!eb) return
    let cancelled = false
    const run = async () => {
      try {
        // Fetch a pool of properties (two pages) to select from
        let pool: EBProperty[] = []
        let next: number | null = 1
        let iterations = 0
        while (next && iterations < 2) {
          const page = iterations === 0 ? 1 : next
          const res = await listEBPropertiesPaged({ page, limit: 50 })
          pool = pool.concat(res.items)
          next = res.nextPage
          iterations += 1
        }
        if (cancelled) return

        const currentCity = (eb.location.includes(',') ? eb.location.split(',')[1]!.trim() : eb.location).toLowerCase()
        const currentType = (eb as any).propertyType ? String((eb as any).propertyType).toLowerCase() : ''
        const currentId = eb.id
        const baseLat = eb.latitude ?? null
        const baseLng = eb.longitude ?? null

        // Similar: prefer same type and same city; sort by nearest price and then by bedroom diff
        const similarList = pool
          .filter((p) => p.id !== currentId)
          .filter((p) => {
            const city = (p.location.includes(',') ? p.location.split(',')[1]!.trim() : p.location).toLowerCase()
            const type = (p.propertyType || '').toLowerCase()
            const cityMatch = city === currentCity
            const typeMatch = currentType ? type.includes(currentType) : true
            return cityMatch && typeMatch
          })
          .sort((a, b) => {
            const dp = Math.abs((a.price || 0) - (eb.price || 0)) - Math.abs((b.price || 0) - (eb.price || 0))
            if (dp !== 0) return dp
            const da = Math.abs((a.bedrooms || 0) - (eb.bedrooms || 0)) - Math.abs((b.bedrooms || 0) - (eb.bedrooms || 0))
            return da
          })
          .slice(0, 3)

        // Nearby: prefer by geographic distance when lat/lng present, fallback to same city
        let nearbyList = pool
          .filter((p) => p.id !== currentId)
          .sort((a, b) => {
            if (baseLat !== null && baseLng !== null && a.latitude != null && a.longitude != null && b.latitude != null && b.longitude != null) {
              const da = Math.hypot((a.latitude as number) - baseLat, (a.longitude as number) - baseLng)
              const db = Math.hypot((b.latitude as number) - baseLat, (b.longitude as number) - baseLng)
              if (!Number.isNaN(da) && !Number.isNaN(db)) return da - db
            }
            const cityA = (a.location.includes(',') ? a.location.split(',')[1]!.trim() : a.location).toLowerCase()
            const cityB = (b.location.includes(',') ? b.location.split(',')[1]!.trim() : b.location).toLowerCase()
            if (cityA === currentCity && cityB !== currentCity) return -1
            if (cityB === currentCity && cityA !== currentCity) return 1
            return 0
          })
          .slice(0, 12)
        if (nearbyList.length < 12) {
          nearbyList = nearbyList.concat(
            pool.filter((p) => p.id !== currentId && !nearbyList.find((x) => x.id === p.id)).slice(0, 12 - nearbyList.length)
          )
        }

        if (!cancelled) {
          setSimilar(similarList)
          setNearby(nearbyList)
        }
      } catch (e) {
        console.error('Similar/nearby load error', e)
      }
    }
    run()
    return () => { cancelled = true }
  }, [eb])

  useEffect(() => {
    window.scrollTo(0, 0)
  }, [publicId])

  if (!eb && !loading) {
    return (
      <section className="bg-black min-h-[80svh] flex items-center">
        <div className="container mx-auto px-6 text-center">
          <div className="text-2xl mb-4">Propiedad no encontrada</div>
          <Link to="/" className="underline">Regresar</Link>
        </div>
      </section>
    )
  }

  const number = (import.meta.env.VITE_WHATSAPP as string | undefined)?.replace(/[^\d]/g, '') || '5215555555555'
  const msg = encodeURIComponent(`Hola Novaland, me interesa la propiedad ${eb?.title ?? ''} en ${eb?.location ?? ''}.`)
  const waHref = `https://wa.me/${number}?text=${msg}`


  const images = eb?.images?.length ? eb.images : ['']
  const a = {
    bedrooms: eb?.bedrooms ?? 0,
    bathrooms: eb?.bathrooms ?? 0,
    parkingSpots: eb?.parkingSpaces ?? 0,
    integralKitchen: true,
    naturalGas: true,
    patio: false,
    sizeM2: eb?.constructionSize ?? 0,
    floors: 1,
  }
  const [lightboxIndex, setLightboxIndex] = useState<number | null>(null)
  const [showPurchase, setShowPurchase] = useState<boolean>(false)
  const [showSchedule, setShowSchedule] = useState<boolean>(false)
  const [isZoomed, setIsZoomed] = useState<boolean>(false)
  const [isDragging, setIsDragging] = useState<boolean>(false)

  const FALLBACK_IMG = '/photos/fallback.webp'
  const onImgError = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const img = e.currentTarget
    if (img.src.endsWith(FALLBACK_IMG)) return
    img.src = FALLBACK_IMG
    // prevent infinite loop
    img.onerror = null
  }
  const totalImages = images.length
  const goPrev = (e?: React.MouseEvent) => {
    e?.stopPropagation()
    setLightboxIndex((i) => {
      if (i === null) return 0
      return (i - 1 + totalImages) % totalImages
    })
  }
  const goNext = (e?: React.MouseEvent) => {
    e?.stopPropagation()
    setLightboxIndex((i) => {
      if (i === null) return 0
      return (i + 1) % totalImages
    })
  }

  useEffect(() => {
    if (lightboxIndex === null) return
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setLightboxIndex(null)
        setIsZoomed(false)
      }
      if (e.key === 'ArrowLeft') goPrev()
      if (e.key === 'ArrowRight') goNext()
    }
    window.addEventListener('keydown', onKey)
    return () => window.removeEventListener('keydown', onKey)
  }, [lightboxIndex])

  useEffect(() => {
    // Reset zoom cuando cambia la imagen
    setIsZoomed(false)
    setIsDragging(false)
  }, [lightboxIndex])


  console.log("eb", eb)

  const lat = eb?.latitude;
  const lng = eb?.longitude;

  return (
    <div>
      <Navbar />
      <section className="bg-black pt-24  md:pt-28 ">
        <div className="
       container mx-auto px-6 max-w-7xl">
          {error && <div className="mb-4 text-white/70">{error}</div>}

          {/* Título y ubicación - estilo PDP moderno */}
          <div className="mb-4">
            <div className="text-sm text-white/60 mb-1">Nuevo · En venta</div>
            <h1 className="text-2xl md:text-4xl font-semibold text-white leading-tight">{eb?.title || 'Propiedad'}</h1>
            <div className="mt-2 flex items-center gap-2 text-white/70">
              <i className="fa-solid fa-location-dot text-sm nv-icon" />
              <span className="text-sm">{eb?.location || ''}</span>
            </div>
          </div>

          {/* Gallery - estilo PDP con más énfasis visual */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-[2fr_1fr] gap-2 md:gap-3">
            {/* Imagen principal grande - izquierda */}
            <motion.div
              key={images[0]}
              className="relative group cursor-pointer h-[50svh] md:h-[65svh]"
              onClick={() => setLightboxIndex(0)}
              initial={{ opacity: 0.2, scale: 1.01 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.6, ease: 'easeOut' }}
            >
              <img
                src={images[0]}
                alt={eb?.title || 'Propiedad'}
                className="w-full h-full object-cover rounded-xl md:rounded-2xl border border-white/10"
                onError={onImgError}
                loading="eager"
              />
              <div className="absolute inset-0 bg-black/0 group-hover:bg-black/5 transition rounded-xl md:rounded-2xl" />
            </motion.div>

            {/* Miniaturas laterales - 2 columnas verticales a la derecha */}
            <div className="grid grid-cols-2 grid-rows-2 gap-2 md:gap-3 h-[50svh] md:h-[65svh]">
              {Array.from({ length: 4 }, (_, i) => {
                const src = images[i + 1] || '/photos/fallback.webp'
                return (
                  <motion.div
                    key={`thumb-${i}`}
                    className="relative group cursor-pointer overflow-hidden rounded-lg md:rounded-xl border border-white/10 bg-black/20"
                    onClick={() => setLightboxIndex(i + 1)}
                    initial={{ opacity: 0.2, y: 8 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, ease: 'easeOut', delay: 0.05 * (i + 1) }}
                  >
                    <img
                      src={src}
                      alt={`${eb?.title || 'Propiedad'} ${i + 2}`}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      onError={onImgError}
                      loading="lazy"
                    />
                    {i === 3 && totalImages > 5 && (
                      <div className="absolute inset-0 flex items-center justify-center bg-black/60 text-white text-xs md:text-sm font-medium pointer-events-none">
                        +{totalImages - 5}
                      </div>
                    )}
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition pointer-events-none" />
                  </motion.div>
                )
              })}
            </div>
          </div>



          {/* Amenities */}
          <div className="mt-8 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3">
            <Amenity icon={<i className="fa-solid fa-bed" />} label={`${a.bedrooms} recámaras`} />
            <Amenity icon={<i className="fa-solid fa-toilet" />} label={`${a.bathrooms} baños`} />
            <Amenity icon={<i className="fa-solid fa-square-parking" />} label={`${a.parkingSpots} cajones`} />
            <Amenity icon={<i className="fa-solid fa-kitchen-set" />} label={`Cocina ${a.integralKitchen ? 'integral' : 'no integral'}`} />
            <Amenity icon={<i className="fa-solid fa-fire" />} label={`Gas ${a.naturalGas ? 'natural' : 'LP'}`} />
            <Amenity icon={<i className="fa-solid fa-house-chimney" />} label={`${a.patio ? 'Con patio' : 'Sin patio'}`} />
            <Amenity icon={<i className="fa-solid fa-ruler-combined" />} label={`${a.sizeM2 || '—'} m²`} />
            <Amenity icon={<i className="fa-solid fa-building" />} label={`${a.floors || '—'} pisos`} />
          </div>

           {/* Map and nearby POIs */}
           <div className="position-relative mt-10 grid grid-cols-1 lg:grid-cols-2 gap-6 items-start">
             <div className="rounded-2xl border border-white/10 overflow-hidden nv-map-dark">
               <iframe
                 title="Mapa"
                 className="w-full h-[60svh]"
                 loading="lazy"
                 referrerPolicy="no-referrer-when-downgrade"
                 src={`https://www.google.com/maps?q=${lat},${lng}&hl=es&z=15&output=embed`}
               />
             </div>
            <div className="flex flex-col gap-3">
              {/* Panel de compra (precio + CTAs), inspirado en PDP modernos */}
              <div className="rounded-2xl border border-white/10 bg-white/5 p-5">
                <div className="text-2xl md:text-3xl font-semibold  price">
                  {new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', maximumFractionDigits: 2 }).format(eb?.price || 0)}<span style={{ fontSize: 'small' }}> MXN</span><span className="text-white/100">{eb?.operationType == 'sale' ? '' : "/mes"}</span>
                </div>
                <div className="mt-1 text-xs text-white/70">Disponibilidad inmediata · Asesoría sin costo</div>
                <div className="mt-4 flex flex-col gap-2">
                  <button
                    type="button"
                    onClick={() => setShowPurchase(true)}
                    className="inline-flex w-full items-center justify-center gap-3 h-12 md:h-13 rounded-3xl px-6 nv-gradient-gold text-white hover:cursor-pointer font-semibold tracking-wide shadow-[0_12px_34px_rgba(1,84,38,0.45)] hover:brightness-110 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/30 transition"
                  >
                    <i className="fa-solid fa-bag-shopping text-white/90" />
                    Apartar propiedad {new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', maximumFractionDigits: 2 }).format((eb?.price || 0) / 10)}
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowSchedule(!showSchedule)}
                    className="inline-flex w-full hover:cursor-pointer items-center justify-center gap-2 h-11 md:h-12 rounded-3xl border border-white/15 bg-white/5 px-6 text-sm md:text-base text-white/90 hover:bg-white/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/20 transition"
                  >
                    <i className="fa-solid fa-calendar-check" />
                    <span className="ml-1">{showSchedule ? 'Ocultar calendario' : 'Agendar visita'}</span>
                  </button>
                </div>
                <div className="mt-3 flex items-center gap-4 text-xs text-white/60">
                  <div className="inline-flex items-center gap-1"><i className="fa-solid fa-shield" /> Trato seguro</div>
                  <div className="inline-flex items-center gap-1"><i className="fa-solid fa-bolt" /> Respuesta rápida</div>
                </div>
                
                {/* Calendario expandible */}
                {showSchedule && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3, ease: 'easeInOut' }}
                    className="mt-4 rounded-2xl border border-white/10 bg-white/5 overflow-hidden"
                  >
                    <div className="p-4">
                      <div className="text-white/80 mb-3 flex items-center gap-2">
                        <span className="nv-icon"><i className="fa-solid fa-calendar-check" /></span>
                        Selecciona fecha y hora para tu visita
                      </div>
                      <CustomCalendar onBookingComplete={(data) => {
                        console.log('Cita programada:', data);
                        // Aquí puedes agregar lógica para enviar los datos a tu backend
                        alert(`¡Cita confirmada! ${data.name}, te esperamos el ${new Date(data.date).toLocaleDateString('es-ES')} a las ${data.time}. Te contactaremos al ${data.phone}`);
                      }} />
                    </div>
                  </motion.div>
                )}
              </div>

              {/* Métodos de pago e interesados */}
              <div className="rounded-2xl border border-white/10 bg-white/5 p-4">
                <div className="text-white/80 mb-3 flex items-center gap-2">
                  <span className="nv-icon"><i className="fa-solid fa-credit-card" /></span>
                  Métodos de pago
                </div>
                <div className="flex flex-wrap gap-2 mb-4">
                  {[
                    { icon: 'fa-credit-card', label: 'Tarjeta' },
                    { icon: 'fa-university', label: 'Transferencia' },
                    { icon: 'fa-money-bill-wave', label: 'Efectivo' },
                    { icon: 'fa-handshake', label: 'Financiamiento' },
                  ].map((t) => (
                    <button key={t.label} className="rounded-full px-3 py-1 text-sm border border-white/15 hover:bg-white/10 inline-flex items-center gap-2">
                      <span className="nv-icon"><i className={`fa-solid ${t.icon}`} /></span>
                      {t.label}
                    </button>
                  ))}
                </div>

                {/* Interesados */}

              </div>

            </div>
          </div>

          {/* Descripciones cortas */}
          <div className="mt-16 md:mt-24">
            <div className="container mx-auto px-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {[0, 1, 2].map((col: number) => (
                  <div key={col} className="rounded-2xl border border-white/10 bg-white/5 overflow-hidden">
                    <img src={images[(col + 1) % images.length]} alt="destacada" className="h-48 w-full object-cover" />
                    <div className="p-4">
                      <div className="text-lg font-medium">{col === 0 ? 'Arquitectura' : col === 1 ? 'Acabados' : 'Ubicación'}</div>
                      <p className="mt-2 text-white/70 text-sm">
                        {col === 0 && 'Diseño contemporáneo con espacios luminosos y flujo funcional.'}
                        {col === 1 && 'Materiales de calidad: carpintería, pisos y herrajes premium.'}
                        {col === 2 && 'Zona conectada a servicios, escuelas y áreas verdes.'}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

            {/* Propiedades similares (API) */}
            <div className="mt-16 md:mt-20">
              <div className="container mx-auto px-6">
                <div className="flex items-end justify-between">
                  <h2 className="text-2xl md:text-4xl font-serif nv-gold-text">Propiedades similares</h2>
                </div>
                <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {similar.map((p) => (
                    <Link key={p.id} to={`/property/${encodeURIComponent(p.id)}`} className="group block relative overflow-hidden rounded-2xl bg-carbon ring-1 ring-white/5 hover:ring-white/10 transition">
                      {p.photoUrl ? (
                        <img src={p.photoUrl} alt={p.title} className="h-52 w-full object-cover transition-transform duration-500 group-hover:scale-105" />
                      ) : (
                        <div className="h-52 w-full flex items-center justify-center text-white/50">Sin imagen</div>
                      )}
                      <div className="p-4">
                        <div className="font-medium">{p.title}</div>
                        <div className="text-sm text-white/70">{p.location}</div>
                        <div className="mt-2 nv-gold-text font-semibold">{new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', maximumFractionDigits: 0 }).format(p.price || 0)}</div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            </div>

             {/* Propiedades cercanas (API, carrusel horizontal) */}
             <div className="mt-16 md:mt-20 mb-12 md:mb-20">
               <div className="container mx-auto px-6">
                 <h2 className="text-2xl md:text-4xl font-serif nv-gold-text">Propiedades cercanas</h2>
                 <div className="mt-8 relative">
                   <div ref={nearbyRef} className="overflow-x-auto nv-scroll-hide max-w-full">
                     <div className="flex gap-4 w-max pr-4">
                      {nearby.map((p) => (
                        <Link key={p.id} to={`/property/${encodeURIComponent(p.id)}`} className="group block w-[280px] sm:w-[320px] relative overflow-hidden rounded-2xl bg-carbon ring-1 ring-white/5 hover:ring-white/10 transition shrink-0">
                          {p.photoUrl ? (
                            <img src={p.photoUrl} alt={p.title} className="h-44 w-full object-cover transition-transform duration-500 group-hover:scale-105" />
                          ) : (
                            <div className="h-44 w-full flex items-center justify-center text-white/50">Sin imagen</div>
                          )}
                          <div className="p-4">
                            <div className="font-medium line-clamp-2">{p.title}</div>
                            <div className="text-sm text-white/70 line-clamp-1">{p.location}</div>
                            <div className="mt-2 nv-gold-text font-semibold">{new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', maximumFractionDigits: 2 }).format(p.price || 0)}</div>
                          </div>
                        </Link>
                      ))}
                    </div>
                  </div>
                  <button
                    aria-label="Anterior"
                    onClick={() => scrollNearby(-1)}
                    className="hidden md:flex absolute left-0 top-1/2 -translate-y-1/2 items-center justify-center h-10 w-10 rounded-full bg-white/15 hover:bg-white/20 border border-white/30 text-white text-2xl shadow-lg backdrop-blur-sm"
                  >
                    ‹
                  </button>
                  <button
                    aria-label="Siguiente"
                    onClick={() => scrollNearby(1)}
                    className="hidden md:flex absolute right-0 top-1/2 -translate-y-1/2 items-center justify-center h-10 w-10 rounded-full bg-white/15 hover:bg-white/20 border border-white/30 text-white text-2xl shadow-lg backdrop-blur-sm"
                  >
                    ›
                  </button>
                </div>
              </div>
            </div>
          </div>

        </div>
        </div>
      </section>
      {/* Lightbox Modal */}
      <AnimatePresence>
        {lightboxIndex !== null && (
          <motion.div
            key="lightbox"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-[60] bg-black/90 backdrop-blur-sm flex items-center justify-center"
            onClick={() => {
              setLightboxIndex(null)
              setIsZoomed(false)
              setIsDragging(false)
            }}
          >
            <motion.div
              initial={{ scale: 0.98, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.98, opacity: 0 }}
              transition={{ type: 'spring', stiffness: 220, damping: 24 }}
              className="relative w-[100vw] max-w-[100vw] md:max-w-[92vw] px-3 md:px-0"
              onClick={(e) => e.stopPropagation()}
            >
              <motion.div
                className="relative overflow-visible flex items-center justify-center"
                style={{ touchAction: 'none' }}
              >
                <motion.img
                  src={images[lightboxIndex]}
                  alt={`${eb?.title || 'Propiedad'} ampliada`}
                  className={`max-h-[90svh] w-full md:w-auto object-contain rounded-xl border border-white/10 shadow-2xl select-none ${isZoomed ? 'cursor-move' : 'cursor-zoom-in'}`}
                  animate={{ scale: isZoomed ? 1.5 : 1 }}
                  transition={{ duration: 0.3, ease: 'easeInOut' }}
                  drag={isZoomed}
                  dragConstraints={{ left: -400, right: 400, top: -400, bottom: 400 }}
                  dragElastic={0.05}
                  dragMomentum={false}
                  whileTap={isZoomed ? { cursor: 'grabbing' } : undefined}
                  onDragStart={(e) => {
                    e.stopPropagation()
                    setIsDragging(true)
                  }}
                  onDragEnd={(e) => {
                    e.stopPropagation()
                    // Pequeño delay para que el click no se ejecute después del drag
                    setTimeout(() => setIsDragging(false), 100)
                  }}
                  onClick={(e) => {
                    e.stopPropagation()
                    // Solo hacer zoom si no estamos arrastrando
                    if (!isDragging) {
                      setIsZoomed(!isZoomed)
                    }
                  }}
                />
              </motion.div>
              {/* Controls (fixed, discretos) */}
              <button
                aria-label="Anterior"
                onClick={goPrev}
                className="fixed left-1 md:left-6 top-1/2 -translate-y-1/2 flex items-center justify-center h-24 w-9 md:h-24 md:w-12 rounded-full bg-white/20 hover:bg-white/25 border border-white/30 text-white text-3xl md:text-4xl shadow-lg backdrop-blur-sm"
              >
                ‹
              </button>
              <button
                aria-label="Siguiente"
                onClick={goNext}
                className="fixed right-1 md:right-6 top-1/2 -translate-y-1/2 flex items-center justify-center h-24 w-9 md:h-24 md:w-12 rounded-full bg-white/20 hover:bg-white/25 border border-white/30 text-white text-3xl md:text-4xl shadow-lg backdrop-blur-sm"
              >
                ›
              </button>
              <button
                aria-label="Cerrar"
                onClick={(e) => {
                  e.stopPropagation()
                  setLightboxIndex(null)
                  setIsZoomed(false)
                  setIsDragging(false)
                }}
                className="fixed top-4 right-4 md:top-6 md:right-6 flex items-center justify-center h-10 w-10 rounded-full bg-white/10 hover:bg-white/20 border border-white/20 text-white text-xl shadow-lg backdrop-blur-sm transition"
              >
                ✕
              </button>
              {/* Thumbnails row */}
              <div className="mt-3 md:mt-4 px-1">
                <div className="flex items-center gap-2 overflow-x-auto nv-scroll-hide max-w-[100vw] md:max-w-[92vw]">
                  {images.map((src, i) => (
                    <button
                      key={src + i}
                      aria-label={`Ver foto ${i + 1}`}
                      onClick={() => setLightboxIndex(i)}
                      className={`shrink-0 rounded-md overflow-hidden border ${i === lightboxIndex ? 'border-white/60' : 'border-white/10'} hover:border-white/40`}
                      style={{ width: 56, height: 56 }}
                    >
                      <img src={src} alt="miniatura" className="h-full w-full object-cover" />
                    </button>
                  ))}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      {/* Purchase modal */}
      <AnimatePresence>
        {showPurchase && (
          <motion.div
            key="purchase"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-[70] bg-black/80 backdrop-blur-sm flex items-center justify-center px-4"
            onClick={() => setShowPurchase(false)}
          >
            <motion.div
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: 20, opacity: 0 }}
              transition={{ type: 'spring', stiffness: 320, damping: 30 }}
              className="relative w-full max-w-xl rounded-2xl border border-white/10 bg-ink p-5 md:p-6"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="text-lg font-medium mb-2">Comprar ahora</div>
              <p className="text-sm text-white/70 mb-4">Completa los datos para pagar con tarjeta.</p>
              <form className="space-y-3">
                <div>
                  <label className="text-xs text-white/60">Nombre en la tarjeta</label>
                  <input className="mt-1 w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none focus:border-white/20" placeholder="Tu nombre" required />
                </div>
                <div>
                  <label className="text-xs text-white/60">Número de tarjeta</label>
                  <input inputMode="numeric" pattern="[0-9 ]*" className="mt-1 w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none focus:border-white/20" placeholder="4242 4242 4242 4242" required />
                </div>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  <div>
                    <label className="text-xs text-white/60">Expira</label>
                    <input className="mt-1 w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none focus:border-white/20" placeholder="MM/AA" required />
                  </div>
                  <div>
                    <label className="text-xs text-white/60">CVC</label>
                    <input className="mt-1 w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none focus:border-white/20" placeholder="123" required />
                  </div>
                  <div className="hidden md:block" />
                </div>
                <div className="flex items-center gap-3 py-3">
                  <div className="h-px flex-1 bg-white/10" />
                  <div className="text-white/50 text-xs">o</div>
                  <div className="h-px flex-1 bg-white/10" />
                </div>
                <div className="rounded-xl border border-white/10 bg-white/5 p-3">
                  <div className="text-sm mb-1">¿Prefieres otro método?</div>
                  <div className="text-xs text-white/70">Habla con un asesor para conocer alternativas.</div>
                  <a href={waHref} target="_blank" rel="noopener noreferrer" className="mt-3 inline-flex items-center gap-2 rounded-full px-4 py-2 nv-gradient-gold text-black text-sm font-medium shadow-[0_6px_20px_rgba(98,180,155,0.35)]">
                    <i className="fa-brands fa-whatsapp" /> Contactar asesor
                  </a>
                </div>
                <div className="pt-1 flex items-center justify-end gap-2">
                  <button type="button" onClick={() => setShowPurchase(false)} className="rounded-full px-4 py-2 border border-white/15 text-sm text-white/80 hover:bg-white/10">Cancelar</button>
                  <button type="submit" className="rounded-full px-5 py-2 nv-gradient-gold text-black text-sm font-medium shadow-[0_6px_20px_rgba(98,180,155,0.35)]">Pagar</button>
                </div>
              </form>
              <button aria-label="Cerrar" onClick={() => setShowPurchase(false)} className="absolute -top-3 -right-3 rounded-full nv-gradient-gold text-black px-3 py-1 text-sm shadow">X</button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      <Footer />
    </div>
  )
}

// Se removieron utilidades locales; ahora se consulta a la API


